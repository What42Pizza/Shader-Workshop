###############################
#        SETTINGS MENU        #
###############################



screen = <profile> STYLE [SKY_SETTINGS] [COLOR_SETTINGS] [SHADING_SETTINGS] [POST_PROCESSING_SETTINGS] [WAVING_SETTINGS] [WATER_SETTINGS] [ISOMETRIC_SETTINGS] [DEBUG_SETTINGS]
	
	screen.SKY_SETTINGS = [FOG_SETTINGS] SKY_BRIGHTNESS SUN_BRIGHTNESS MOON_BRIGHTNESS CLOUDS_BRIGHTNESS DARKEN_SKY_UNDERGROUND STARS_BRIGHTNESS DARKEN_STARS_NEAR_BLOCKLIGHT DARKENED_STARS_BRIGHTNESS WEATHER_TRANSPARENCY CLOUD_TRANSPARENCY HIDE_NEARBY_CLOUDS
		
		screen.FOG_SETTINGS = FOG_ENABLED <empty> <empty> FOG_HEIGHT_SCALE FOG_EXTRA_CLOUDS_DISTANCE FOG_CURVE FOG_AIR_START FOG_AIR_END FOG_AIR_MIN FOG_AIR_RAIN_START FOG_AIR_RAIN_END FOG_AIR_RAIN_MIN FOG_WATER_START FOG_WATER_END FOG_WATER_MIN FOG_LAVA_START FOG_LAVA_END FOG_LAVA_MIN FOG_POWDERED_SNOW_START FOG_POWDERED_SNOW_END FOG_POWDERED_SNOW_MIN
		screen.FOG_SETTINGS.columns = 3
		
	screen.COLOR_SETTINGS = [DAY_COLOR_SETTINGS] [NIGHT_COLOR_SETTINGS] [SUNRISE_COLOR_SETTINGS] [SUNSET_COLOR_SETTINGS] [BLOCK_COLOR_SETTINGS] [CAVE_COLOR_SETTINGS]
		
		screen.DAY_COLOR_SETTINGS = SKYLIGHT_DAY_BRIGHTNESS AMBIENT_DAY_BRIGHTNESS SKYLIGHT_DAY_RED AMBIENT_DAY_RED SKYLIGHT_DAY_GREEN AMBIENT_DAY_GREEN SKYLIGHT_DAY_BLUE AMBIENT_DAY_BLUE
		
		screen.NIGHT_COLOR_SETTINGS = SKYLIGHT_NIGHT_BRIGHTNESS AMBIENT_NIGHT_BRIGHTNESS SKYLIGHT_NIGHT_RED AMBIENT_NIGHT_RED SKYLIGHT_NIGHT_GREEN AMBIENT_NIGHT_GREEN SKYLIGHT_NIGHT_BLUE AMBIENT_NIGHT_BLUE
		
		screen.SUNRISE_COLOR_SETTINGS = SKYLIGHT_SUNRISE_BRIGHTNESS AMBIENT_SUNRISE_BRIGHTNESS SKYLIGHT_SUNRISE_RED AMBIENT_SUNRISE_RED SKYLIGHT_SUNRISE_GREEN AMBIENT_SUNRISE_GREEN SKYLIGHT_SUNRISE_BLUE AMBIENT_SUNRISE_BLUE
		
		screen.SUNSET_COLOR_SETTINGS = SKYLIGHT_SUNSET_BRIGHTNESS AMBIENT_SUNSET_BRIGHTNESS SKYLIGHT_SUNSET_RED AMBIENT_SUNSET_RED SKYLIGHT_SUNSET_GREEN AMBIENT_SUNSET_GREEN SKYLIGHT_SUNSET_BLUE AMBIENT_SUNSET_BLUE
		
		screen.BLOCK_COLOR_SETTINGS = BLOCK_BRIGHTNESS BLOCK_RED BLOCK_GREEN BLOCK_BLUE BLOCKLIGHT_FLICKERING_ENABLED
		
		screen.CAVE_COLOR_SETTINGS = CAVE_AMBIENT_BRIGHTNESS CAVE_AMBIENT_RED CAVE_AMBIENT_GREEN CAVE_AMBIENT_BLUE
		
	screen.SHADING_SETTINGS = SHADOWS_ENABLED shadowMapResolution shadowDistance SHADOW_DISTORT_ADDITION SHADOW_FILTERING SHADOWS_NOISE PIXELATED_SHADOWS ambientOcclusionLevel USE_VANILLA_BRIGHTNESS EXCLUDE_FOLIAGE SIDE_SHADING sunPathRotation RAIN_LIGHT_MULT [HANDHELD_LIGHT_SETTINGS] BLOCKLIGHT_FLICKERING_ENABLED [SSAO_SETTINGS]
		
		screen.HANDHELD_LIGHT_SETTINGS = HANDHELD_LIGHT_ENABLED HANDHELD_LIGHT_DISTANCE HANDHELD_LIGHT_BRIGHTNESS
		
	screen.POST_PROCESSING_SETTINGS = [REFLECTION_SETTINGS] [SSAO_SETTINGS] [BLOOM_SETTINGS] [SUNRAYS_SETTINGS] [DOF_SETTINGS] [ANTI_ALIASING_SETTINGS] [MOTION_BLUR_SETTINGS] [SHARPENING_SETTINGS] [COLOR_CORRECTION_SETTINGS] [VIGNETTE_SETTINGS]
		
		screen.REFLECTION_SETTINGS = REFLECTIONS_ENABLED REFLECTION_ITERATIONS REFLECTION_STEP_INCREASE <empty> <empty> <empty> WATER_REFLECTION_AMOUNT WATER_REFLECTION_FRESNEL <empty> <empty> RAIN_REFLECTION_AMOUNT RAIN_REFLECTION_FRESNEL RAIN_REFLECTION_COVERAGE RAIN_REFLECTION_MIN RAIN_REFLECTION_SLOPE
		
		screen.SSAO_SETTINGS = SSAO_ENABLED AO_AMOUNT AO_SIZE AO_QUALITY
		
		screen.BLOOM_SETTINGS = BLOOM_ENABLED BLOOM_QUALITY BLOOM_AMOUNT BLOOM_SIZE BLOOM_LOW_CUTOFF BLOOM_HIGH_CUTOFF BLOOM_NETHER_MULT
		
		screen.SUNRAYS_SETTINGS = DEPTH_SUNRAYS_ENABLED VOL_SUNRAYS_ENABLED SUNRAYS_STYLE SUNRAYS_QUALITY SUNRAYS_COMPUTE_COUNT SUNRAYS_AMOUNT_DAY SUNRAYS_AMOUNT_NIGHT SUNRAYS_AMOUNT_SUNRISE SUNRAYS_AMOUNT_SUNSET SUNRAYS_SUN_RED SUNRAYS_SUN_GREEN SUNRAYS_SUN_BLUE SUNRAYS_MOON_RED SUNRAYS_MOON_GREEN SUNRAYS_MOON_BLUE SUNRAYS_FLICKERING_FIX
		
		screen.DOF_SETTINGS = DOF_ENABLED DOF_SLOPE_TYPE DOF_NEAR_BLUR_START DOF_FAR_BLUR_START DOF_NEAR_BLUR_SLOPE DOF_FAR_BLUR_SLOPE DOF_NEAR_BLUR_STRENGTH DOF_FAR_BLUR_STRENGTH DOF_NEAR_BLUR_SIZE DOF_FAR_BLUR_SIZE DOF_LOCKED_FOCAL_PLANE DOF_FOCAL_PLANE_DISTANCE
		
		screen.ANTI_ALIASING_SETTINGS = TAA_ENABLED
		
		screen.MOTION_BLUR_SETTINGS = MOTION_BLUR_ENABLED MOTION_BLUR_AMOUNT MOTION_BLUR_QUALITY
		
		screen.SHARPENING_SETTINGS = SHARPENING_ENABLED SHARPEN_AMOUNT SHARPEN_VEL_ADDITION SHARPENING_DETECT_SIZE
		
		screen.COLOR_CORRECTION_SETTINGS = [COLOR_SETTINGS] USE_GAMMA_CORRECTION GAMMA BRIGHTNESS VIBRANCE SATURATION SATURATION_DARK SATURATION_LIGHT CONTRAST CONTRAST_DETECT_RED CONTRAST_DETECT_GREEN CONTRAST_DETECT_BLUE TONEMAPPER [COLORBLIND_CORRECTION]
		screen.COLOR_CORRECTION_SETTINGS.columns = 3
			
			screen.COLORBLIND_CORRECTION = COLORBLIND_MODE COLORBLIND_INTENSITY
			
		screen.VIGNETTE_SETTINGS = VIGNETTE_ENABLED VIGNETTE_SCALE VIGNETTE_AMOUNT_SURFACE VIGNETTE_AMOUNT_UNDERGROUND VIGNETTE_NOISE_ENABLED
		
	screen.WAVING_SETTINGS = WAVING_ENABLED WAVING_SPEED WAVING_WORLD_SCALE WAVING_AMOUNT_1 WAVING_AMOUNT_2 WAVING_AMOUNT_3 WAVING_RAIN_MULT WAVING_NIGHT_MULT HEIGHT_BASED_WAVING_ENABLED [WAVING_WATER_SETTINGS] [UNDERWATER_WAVINESS_SETTINGS]
		
		screen.WAVING_WATER_SETTINGS = PHYSICALLY_WAVING_WATER_ENABLED WAVING_WATER_NORMALS_ENABLED
		
		screen.UNDERWATER_WAVINESS_SETTINGS = UNDERWATER_WAVINESS_ENABLED UNDERWATER_WAVINESS_AMOUNT UNDERWATER_WAVINESS_SCALE UNDERWATER_WAVINESS_SPEED
		
	screen.WATER_SETTINGS = WATER_FRESNEL_ADDITION [WAVING_WATER_SETTINGS] [UNDERWATER_WAVINESS_SETTINGS] WATER_TRANSPARENCY
		
	screen.ISOMETRIC_SETTINGS = ISOMETRIC_RENDERING_ENABLED ISOMETRIC_WORLD_SCALE ISOMETRIC_BACKWARD_VISIBILITY ISOMETRIC_FORWARD_VISIBILITY
		
	screen.DEBUG_SETTINGS = USE_BETTER_RAND SHOW_DANGEROUS_LIGHT USE_SIMPLE_LIGHT SSAO_SHOW_AMOUNT BLOOM_SHOW_ADDITION BLOOM_SHOW_FILTERED_TEXTURE SUNRAYS_SHOW_ADDITION DOF_SHOW_AMOUNTS REFLECTIVE_EVERYTHING



sliders = SIDE_SHADING BLOCK_BRIGHTNESS BLOCK_RED BLOCK_GREEN BLOCK_BLUE SKYLIGHT_DAY_BRIGHTNESS SKYLIGHT_DAY_RED SKYLIGHT_DAY_BLUE SKYLIGHT_DAY_GREEN AMBIENT_DAY_BRIGHTNESS AMBIENT_DAY_RED AMBIENT_DAY_BLUE AMBIENT_DAY_GREEN SKYLIGHT_NIGHT_BRIGHTNESS SKYLIGHT_NIGHT_RED SKYLIGHT_NIGHT_BLUE SKYLIGHT_NIGHT_GREEN AMBIENT_NIGHT_BRIGHTNESS AMBIENT_NIGHT_RED AMBIENT_NIGHT_BLUE AMBIENT_NIGHT_GREEN SKYLIGHT_SUNRISE_BRIGHTNESS SKYLIGHT_SUNRISE_RED SKYLIGHT_SUNRISE_BLUE SKYLIGHT_SUNRISE_GREEN AMBIENT_SUNRISE_BRIGHTNESS AMBIENT_SUNRISE_RED AMBIENT_SUNRISE_BLUE AMBIENT_SUNRISE_GREEN SKYLIGHT_SUNSET_BRIGHTNESS SKYLIGHT_SUNSET_RED SKYLIGHT_SUNSET_BLUE SKYLIGHT_SUNSET_GREEN AMBIENT_SUNSET_BRIGHTNESS AMBIENT_SUNSET_RED AMBIENT_SUNSET_BLUE AMBIENT_SUNSET_GREEN GAMMA BRIGHTNESS SATURATION SATURATION_DARK SATURATION_LIGHT VIBRANCE CONTRAST CONTRAST_DETECT_RED CONTRAST_DETECT_GREEN CONTRAST_DETECT_BLUE CONTRAST BLOOM_AMOUNT BLOOM_SIZE BLOOM_QUALITY BLOOM_LEVELS BLOOM_LOW_CUTOFF BLOOM_HIGH_CUTOFF SHARPEN_AMOUNT SUNRAYS_QUALITY SUNRAYS_COMPUTE_COUNT SUNRAYS_AMOUNT_DAY SUNRAYS_AMOUNT_NIGHT SUNRAYS_AMOUNT_SUNRISE SUNRAYS_AMOUNT_SUNSET VIGNETTE_AMOUNT_SURFACE VIGNETTE_AMOUNT_UNDERGROUND VIGNETTE_SCALE WAVING_SPEED WAVING_WORLD_SCALE WAVING_AMOUNT_1 WAVING_AMOUNT_2 WAVING_AMOUNT_3 WAVING_RAIN_MULT WAVING_NIGHT_MULT RAIN_LIGHT_MULT HANDHELD_LIGHT_DISTANCE HANDHELD_LIGHT_BRIGHTNESS AO_AMOUNT AO_SIZE AO_QUALITY SUNRAYS_SUN_RED SUNRAYS_SUN_GREEN SUNRAYS_SUN_BLUE SUNRAYS_MOON_RED SUNRAYS_MOON_GREEN SUNRAYS_MOON_BLUE FOG_HEIGHT_SCALE FOG_EXTRA_CLOUDS_DISTANCE FOG_START FOG_WATER_DISTANCE FOG_CURVE FOG_WATER_CURVE DOF_NEAR_BLUR_START DOF_NEAR_BLUR_SLOPE DOF_NEAR_BLUR_STRENGTH DOF_NEAR_BLUR_SIZE DOF_FAR_BLUR_START DOF_FAR_BLUR_SLOPE DOF_FAR_BLUR_STRENGTH DOF_FAR_BLUR_SIZE MOTION_BLUR_AMOUNT MOTION_BLUR_QUALITY DOF_FOCAL_PLANE_DISTANCE REFLECTION_ITERATIONS REFLECTION_STEP_INCREASE CAVE_AMBIENT_BRIGHTNESS CAVE_AMBIENT_RED CAVE_AMBIENT_GREEN CAVE_AMBIENT_BLUE SHADOW_DISTORT_ADDITION WATER_REFLECTION_AMOUNT WATER_REFLECTION_FRESNEL RAIN_REFLECTION_AMOUNT RAIN_REFLECTION_FRESNEL RAIN_REFLECTION_MIN RAIN_REFLECTION_COVERAGE UNDERWATER_WAVINESS_AMOUNT UNDERWATER_WAVINESS_SCALE UNDERWATER_WAVINESS_SPEED RAIN_REFLECTION_SLOPE CLOUD_TRANSPARENCY WEATHER_TRANSPARENCY FOG_AIR_START FOG_AIR_END FOG_AIR_MIN FOG_AIR_RAIN_START FOG_AIR_RAIN_END FOG_AIR_RAIN_MIN FOG_WATER_START FOG_WATER_END FOG_WATER_MIN FOG_LAVA_START FOG_LAVA_END FOG_LAVA_MIN FOG_POWDERED_SNOW_START FOG_POWDERED_SNOW_END FOG_POWDERED_SNOW_MIN shadowMapResolution shadowDistance SHADOWS_NOISE sunPathRotation ambientOcclusionLevel STARS_BRIGHTNESS DARKENED_STARS_BRIGHTNESS WATER_TRANSPARENCY ISOMETRIC_WORLD_SCALE ISOMETRIC_BACKWARD_VISIBILITY ISOMETRIC_FORWARD_VISIBILITY PIXELATED_SHADOWS_RESOLUTION SKY_BRIGHTNESS CLOUDS_BRIGHTNESS SUN_BRIGHTNESS MOON_BRIGHTNESS



profile.POTATO      =  REFLECTIONS_ENABLED=0   REFLECTION_ITERATIONS=-1   REFLECTION_STEP_INCREASE=-1    WAVING_WATER_NORMALS_ENABLED=0   SHADOWS_ENABLED=0   SHADOW_FILTERING=-1   shadowDistance=64.0   shadowMapResolution=384   SSAO_ENABLED=0   AO_QUALITY=-1  BLOOM_ENABLED=0   BLOOM_QUALITY=-1  DEPTH_SUNRAYS_ENABLED=0   VOL_SUNRAYS_ENABLED=0   SUNRAYS_QUALITY=-1  TAA_ENABLED=0   SHARPENING_ENABLED=0

profile.LOW         =  REFLECTIONS_ENABLED=0   REFLECTION_ITERATIONS=-1   REFLECTION_STEP_INCREASE=-1    WAVING_WATER_NORMALS_ENABLED=0   SHADOWS_ENABLED=-1  SHADOW_FILTERING=-1  shadowDistance=96.0   shadowMapResolution=512   SSAO_ENABLED=0   AO_QUALITY=-1  BLOOM_ENABLED=-1  BLOOM_QUALITY=-1  DEPTH_SUNRAYS_ENABLED=0   VOL_SUNRAYS_ENABLED=0   SUNRAYS_QUALITY=-1  TAA_ENABLED=-1  SHARPENING_ENABLED=-1

profile.MEDIUM      =  REFLECTIONS_ENABLED=-1  REFLECTION_ITERATIONS=-1   REFLECTION_STEP_INCREASE=-1    WAVING_WATER_NORMALS_ENABLED=-1  SHADOWS_ENABLED=-1  SHADOW_FILTERING=-1  shadowDistance=112.0  shadowMapResolution=768   SSAO_ENABLED=-1  AO_QUALITY=-1  BLOOM_ENABLED=-1  BLOOM_QUALITY=-1  DEPTH_SUNRAYS_ENABLED=-1  VOL_SUNRAYS_ENABLED=-1  SUNRAYS_QUALITY=-1  TAA_ENABLED=-1  SHARPENING_ENABLED=-1

profile.HIGH        =  REFLECTIONS_ENABLED=-1  REFLECTION_ITERATIONS=50   REFLECTION_STEP_INCREASE=-1    WAVING_WATER_NORMALS_ENABLED=-1  SHADOWS_ENABLED=-1  SHADOW_FILTERING=3    shadowDistance=128.0  shadowMapResolution=2048  SSAO_ENABLED=-1  AO_QUALITY=4   BLOOM_ENABLED=-1  BLOOM_QUALITY=4   DEPTH_SUNRAYS_ENABLED=-1  VOL_SUNRAYS_ENABLED=-1  SUNRAYS_QUALITY=5   TAA_ENABLED=-1  SHARPENING_ENABLED=-1

profile.UNPLAYABLE  =  REFLECTIONS_ENABLED=-1  REFLECTION_ITERATIONS=100  REFLECTION_STEP_INCREASE=1.05  WAVING_WATER_NORMALS_ENABLED=-1  SHADOWS_ENABLED=-1  SHADOW_FILTERING=3    shadowDistance=192.0  shadowMapResolution=8192  SSAO_ENABLED=-1  AO_QUALITY=10  BLOOM_ENABLED=-1  BLOOM_QUALITY=4   DEPTH_SUNRAYS_ENABLED=-1  VOL_SUNRAYS_ENABLED=-1  SUNRAYS_QUALITY=10  TAA_ENABLED=-1  SHARPENING_ENABLED=-1










#################################
#        SHADER SETTINGS        #
#################################



dynamicHandLight = false
vignette = false
#frustum.culling = !ISOMETRIC_RENDERING_ENABLED

alphaTest.gbuffers_hand = GL_ALWAYS

alphaTest.gbuffers_clouds=GREATER 0.0001










#####################################
#        SHADER FILE ENABLES        #
#####################################



program.world0/shadow.enabled = SHADOWS_ENABLED
program.world-1/shadow.enabled = SHADOWS_ENABLED
program.world1/shadow.enabled = SHADOWS_ENABLED

program.world0/composite.enabled = BLOOM_ENABLED
program.world-1/composite.enabled = BLOOM_ENABLED
program.world1/composite.enabled = BLOOM_ENABLED

program.world0/composite3.enabled = DOF_ENABLED
program.world-1/composite3.enabled = DOF_ENABLED
program.world1/composite3.enabled = DOF_ENABLED










########################################
#        PER-FRAME CALCULATIONS        #
########################################



# constants

#if MC_VERSION < 11300
	variable.float.pi = 3.1415926538
#endif



# main

uniform.float.farPlusNear = far + near
uniform.float.farMinusNear = far - near
uniform.float.twoTimesNear = 2.0 * near
uniform.float.twoTimesNearTimesFar = 2.0 * near * far

uniform.vec2.viewSize = vec2(viewWidth, viewHeight)
uniform.vec2.pixelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

variable.float.difX = cameraPosition.x - previousCameraPosition.x
variable.float.difY = cameraPosition.y - previousCameraPosition.y
variable.float.difZ = cameraPosition.z - previousCameraPosition.z
variable.float.velocity = sqrt(difX * difX + difY * difY + difZ * difZ) / frameTime
uniform.float.sharpenVelocityFactor = smooth(1, min(velocity, 0.01) * 20, 0, 0.5)

uniform.float.betterRainStrength = 1.0 - sqrt(1.0 - rainStrength)
uniform.float.rainReflectionStrength = smooth(2, betterRainStrength, 45, 30) * (0.3 + 0.7 * smooth(3, if(in(biome_precipitation, 1), 1, 0), 5, 10))

# raise / lower darkened horizon
variable.float.horizonAltitudeAddend1 = atan(75.0 / (eyeAltitude - 58.0))
# fix output of atan
variable.float.horizonAltitudeAddend2 = horizonAltitudeAddend1 + if(horizonAltitudeAddend1 > 0.0, pi / -2.0, pi / 2.0)
# shrink horizon faster when you're high off the ground
uniform.float.horizonAltitudeAddend = horizonAltitudeAddend2 - (atan(eyeAltitude - 64.0) + pi / 2.0) / 20.0

variable.float.sunriseTime = if(worldTime > 18000, worldTime - 24000, worldTime)

# true if the sun is casting shadows
variable.bool.isDay = sunAngle <= 0.5
# true if looking towards whichever isn't casting shadows
variable.bool.isOtherLightSource = shadowLightPosition.z > 0.0001
# isDay ^^ isOtherLightSource
uniform.bool.isSun = (isDay && !isOtherLightSource) || (!isDay && isOtherLightSource)

uniform.float.centerLinearDepthSmooth = 2.0 * near / (far + near - centerDepthSmooth * (far - near))



# TAA Jitter, originally taken from Complementary Reiamgined
# Link: https://modrinth.com/shader/complementary-reimagined

variable.int.frameMod8 = frameCounter % 8

variable.float.taaOffsetX = if (  \
	frameMod8 == 0,  0.125,       \
	frameMod8 == 1, -0.125,       \
	frameMod8 == 2,  0.625,       \
	frameMod8 == 3,  0.375,       \
	frameMod8 == 4, -0.625,       \
	frameMod8 == 5, -0.875,       \
	frameMod8 == 6,  0.375,       \
	frameMod8 == 7,  0.875,       \
	0.0                           \
)
variable.float.taaOffsetY = if (  \
	frameMod8 == 0, -0.375,       \
	frameMod8 == 1,  0.375,       \
	frameMod8 == 2,  0.125,       \
	frameMod8 == 3, -0.625,       \
	frameMod8 == 4,  0.625,       \
	frameMod8 == 5, -0.125,       \
	frameMod8 == 6, -0.875,       \
	frameMod8 == 7,  0.875,       \
	0.0                           \
)
uniform.vec2.taaOffset = vec2(taaOffsetX / viewWidth * 0.97, taaOffsetY / viewHeight * 0.97)



# light calculations


variable.float.sunRiseStart = 0.0
variable.float.sunRiseEnd = 0.1
variable.float.sunSetStart = 0.4
variable.float.sunSetEnd = 0.5
variable.float.moonRiseStart = 0.5
variable.float.moonRiseEnd = 0.6
variable.float.moonSetStart = 0.9
variable.float.moonSetEnd = 1.0

uniform.float.sunLightBrightness = if (                                                                                        \
	sunAngle >= sunRiseStart && sunAngle < sunRiseEnd , pow((sunAngle - sunRiseStart) / (sunRiseEnd - sunRiseStart), 0.8),     \
	sunAngle >= sunRiseEnd   && sunAngle < sunSetStart, 1.0,                                                                   \
	sunAngle >= sunSetStart  && sunAngle < sunSetEnd  , pow(1.0 - (sunAngle - sunSetStart) / (sunSetEnd - sunSetStart), 0.8),  \
	0.0                                                                                                                        \
)
uniform.float.moonLightBrightness = if (                                                                                            \
	sunAngle >= moonRiseStart && sunAngle < moonRiseEnd , pow((sunAngle - moonRiseStart) / (moonRiseEnd - moonRiseStart), 0.8),     \
	sunAngle >= moonRiseEnd   && sunAngle < moonSetStart, 1.0,                                                                      \
	sunAngle >= moonSetStart  && sunAngle < moonSetEnd  , pow(1.0 - (sunAngle - moonSetStart) / (moonSetEnd - moonSetStart), 0.8),  \
	0.0                                                                                                                             \
)


# for mixing the sunlight color (moonlight color is flat)
variable.float.sunriseColorEnd = 0.1
variable.float.sunsetColorStart = 0.4

uniform.float.sunriseColorPercent = if (                                                                                         \
	sunAngle >= sunRiseStart && sunAngle < sunriseColorEnd, 1.0 - (sunAngle - sunRiseStart) / (sunriseColorEnd - sunRiseStart),  \
	0.0                                                                                                                          \
)
uniform.float.sunsetColorPercent = if (                                                                                    \
	sunAngle >= sunsetColorStart && sunAngle < sunSetEnd, (sunAngle - sunsetColorStart) / (sunSetEnd - sunsetColorStart),  \
	0.0                                                                                                                    \
)
uniform.float.sunDayColorPercent = 1.0 - (sunriseColorPercent + sunsetColorPercent)


variable.float.ambientSunriseStart = 0.9
#ambientSunriseSwitch is always 0.0 and 1.0
variable.float.ambientSunriseEnd = 0.1
variable.float.ambientSunsetStart = 0.4
#ambientSunsetSwitch is always 0.5
variable.float.ambientSunsetEnd = 0.6

uniform.float.ambientSunPercent = if (                                                                                                    \
	sunAngle >= 0.0                && sunAngle < ambientSunriseEnd , (sunAngle - 0.0) / (ambientSunriseEnd - 0.0),                        \
	sunAngle >= ambientSunriseEnd  && sunAngle < ambientSunsetStart, 1.0,                                                                 \
	sunAngle >= ambientSunsetStart && sunAngle < 0.5               , 1.0 - (sunAngle - ambientSunsetStart) / (0.5 - ambientSunsetStart),  \
	0.0                                                                                                                                   \
)
uniform.float.ambientMoonPercent = if (                                                                                                                 \
	sunAngle >= 0.5                 && sunAngle < ambientSunsetEnd   , pow((sunAngle - 0.5) / (ambientSunsetEnd - 0.5), 0.5),                           \
	sunAngle >= ambientSunsetEnd    && sunAngle < ambientSunriseStart, 1.0,                                                                             \
	sunAngle >= ambientSunriseStart && sunAngle < 1.0                , pow(1.0 - (sunAngle - ambientSunriseStart) / (1.0 - ambientSunriseStart), 0.5),  \
	0.0                                                                                                                                                 \
)
uniform.float.ambientSunrisePercent = if (                                        \
	sunAngle >= ambientSunriseStart && sunAngle < 1.0, 1.0 - ambientMoonPercent,  \
	sunAngle >= 0.0 && sunAngle < ambientSunriseEnd  , 1.0 - ambientSunPercent,   \
	0.0                                                                           \
)
uniform.float.ambientSunsetPercent = if (                                         \
	sunAngle >= ambientSunsetStart && sunAngle < 0.5, 1.0 - ambientSunPercent,    \
	sunAngle >= 0.5 && sunAngle < ambientSunsetEnd  , 1.0 - ambientMoonPercent,   \
	0.0                                                                           \
)





# blocklight flickering

variable.float.blockFlickerTime = frameTimeCounter * 4
variable.int.blockFlickerIndex = floor(blockFlickerTime)
variable.int.blockFlickerMod9 = blockFlickerIndex % 9
variable.int.blockFlickerMod11 = blockFlickerIndex % 11
variable.int.blockFlickerMod13 = blockFlickerIndex % 13
variable.float.blockFlickerInterpValue = blockFlickerTime % 1.0

# use three arrays (lengths 9, 11, and 13) to have a pattern that only repeats every 1287th value (ifs can only have 16 branches + else?????)
variable.float.blockFlicker9A = if (  \
	blockFlickerMod9 == 0,  0.583,    \
	blockFlickerMod9 == 1,  0.853,    \
	blockFlickerMod9 == 2,  0.337,    \
	blockFlickerMod9 == 3,  0.361,    \
	blockFlickerMod9 == 4,  0.07 ,    \
	blockFlickerMod9 == 5,  0.719,    \
	blockFlickerMod9 == 6,  0.038,    \
	blockFlickerMod9 == 7,  0.279,    \
	blockFlickerMod9 == 8,  0.599,    \
	0.0  \
)
variable.float.blockFlicker9B = if (  \
	blockFlickerMod9 == 0,  0.853,    \
	blockFlickerMod9 == 1,  0.337,    \
	blockFlickerMod9 == 2,  0.361,    \
	blockFlickerMod9 == 3,  0.07 ,    \
	blockFlickerMod9 == 4,  0.719,    \
	blockFlickerMod9 == 5,  0.038,    \
	blockFlickerMod9 == 6,  0.279,    \
	blockFlickerMod9 == 7,  0.599,    \
	blockFlickerMod9 == 8,  0.583,    \
	0.0  \
)
variable.float.blockFlicker9C = if (  \
	blockFlickerMod9 == 0,  0.337,    \
	blockFlickerMod9 == 1,  0.361,    \
	blockFlickerMod9 == 2,  0.07 ,    \
	blockFlickerMod9 == 3,  0.719,    \
	blockFlickerMod9 == 4,  0.038,    \
	blockFlickerMod9 == 5,  0.279,    \
	blockFlickerMod9 == 6,  0.599,    \
	blockFlickerMod9 == 7,  0.583,    \
	blockFlickerMod9 == 8,  0.853,    \
	0.0  \
)
variable.float.blockFlicker9D = if (  \
	blockFlickerMod9 == 0,  0.361,    \
	blockFlickerMod9 == 1,  0.07 ,    \
	blockFlickerMod9 == 2,  0.719,    \
	blockFlickerMod9 == 3,  0.038,    \
	blockFlickerMod9 == 4,  0.279,    \
	blockFlickerMod9 == 5,  0.599,    \
	blockFlickerMod9 == 6,  0.583,    \
	blockFlickerMod9 == 7,  0.853,    \
	blockFlickerMod9 == 8,  0.337,    \
	0.0  \
)

variable.float.blockFlicker11A = if (  \
	blockFlickerMod11 == 0,  0.273,    \
	blockFlickerMod11 == 1,  0.673,    \
	blockFlickerMod11 == 2,  0.248,    \
	blockFlickerMod11 == 3,  0.791,    \
	blockFlickerMod11 == 4,  0.229,    \
	blockFlickerMod11 == 5,  0.399,    \
	blockFlickerMod11 == 6,  0.124,    \
	blockFlickerMod11 == 7,  0.478,    \
	blockFlickerMod11 == 8,  0.175,    \
	blockFlickerMod11 == 9,  0.822,    \
	blockFlickerMod11 == 10, 0.192,    \
	0.0  \
)
variable.float.blockFlicker11B = if (  \
	blockFlickerMod11 == 0,  0.673,    \
	blockFlickerMod11 == 1,  0.248,    \
	blockFlickerMod11 == 2,  0.791,    \
	blockFlickerMod11 == 3,  0.229,    \
	blockFlickerMod11 == 4,  0.399,    \
	blockFlickerMod11 == 5,  0.124,    \
	blockFlickerMod11 == 6,  0.478,    \
	blockFlickerMod11 == 7,  0.175,    \
	blockFlickerMod11 == 8,  0.822,    \
	blockFlickerMod11 == 9,  0.192,    \
	blockFlickerMod11 == 10, 0.273,    \
	0.0  \
)
variable.float.blockFlicker11C = if (  \
	blockFlickerMod11 == 0,  0.248,    \
	blockFlickerMod11 == 1,  0.791,    \
	blockFlickerMod11 == 2,  0.229,    \
	blockFlickerMod11 == 3,  0.399,    \
	blockFlickerMod11 == 4,  0.124,    \
	blockFlickerMod11 == 5,  0.478,    \
	blockFlickerMod11 == 6,  0.175,    \
	blockFlickerMod11 == 7,  0.822,    \
	blockFlickerMod11 == 8,  0.192,    \
	blockFlickerMod11 == 9,  0.273,    \
	blockFlickerMod11 == 10, 0.673,    \
	0.0  \
)
variable.float.blockFlicker11D = if (  \
	blockFlickerMod11 == 0,  0.791,    \
	blockFlickerMod11 == 1,  0.229,    \
	blockFlickerMod11 == 2,  0.399,    \
	blockFlickerMod11 == 3,  0.124,    \
	blockFlickerMod11 == 4,  0.478,    \
	blockFlickerMod11 == 5,  0.175,    \
	blockFlickerMod11 == 6,  0.822,    \
	blockFlickerMod11 == 7,  0.192,    \
	blockFlickerMod11 == 8,  0.273,    \
	blockFlickerMod11 == 9,  0.673,    \
	blockFlickerMod11 == 10, 0.248,    \
	0.0  \
)

variable.float.blockFlicker13A = if (  \
	blockFlickerMod13 == 0,  0.799,    \
	blockFlickerMod13 == 1,  0.411,    \
	blockFlickerMod13 == 2,  0.471,    \
	blockFlickerMod13 == 3,  0.909,    \
	blockFlickerMod13 == 4,  0.981,    \
	blockFlickerMod13 == 5,  0.170,    \
	blockFlickerMod13 == 6,  0.773,    \
	blockFlickerMod13 == 7,  0.558,    \
	blockFlickerMod13 == 8,  0.615,    \
	blockFlickerMod13 == 9,  0.242,    \
	blockFlickerMod13 == 10, 0.502,    \
	blockFlickerMod13 == 11, 0.269,    \
	blockFlickerMod13 == 12, 0.101,    \
	0.0  \
)
variable.float.blockFlicker13B = if (  \
	blockFlickerMod13 == 0,  0.411,    \
	blockFlickerMod13 == 1,  0.471,    \
	blockFlickerMod13 == 2,  0.909,    \
	blockFlickerMod13 == 3,  0.981,    \
	blockFlickerMod13 == 4,  0.170,    \
	blockFlickerMod13 == 5,  0.773,    \
	blockFlickerMod13 == 6,  0.558,    \
	blockFlickerMod13 == 7,  0.615,    \
	blockFlickerMod13 == 8,  0.242,    \
	blockFlickerMod13 == 9,  0.502,    \
	blockFlickerMod13 == 10, 0.269,    \
	blockFlickerMod13 == 11, 0.101,    \
	blockFlickerMod13 == 12, 0.799,    \
	0.0  \
)
variable.float.blockFlicker13C = if (  \
	blockFlickerMod13 == 0,  0.471,    \
	blockFlickerMod13 == 1,  0.909,    \
	blockFlickerMod13 == 2,  0.981,    \
	blockFlickerMod13 == 3,  0.170,    \
	blockFlickerMod13 == 4,  0.773,    \
	blockFlickerMod13 == 5,  0.558,    \
	blockFlickerMod13 == 6,  0.615,    \
	blockFlickerMod13 == 7,  0.242,    \
	blockFlickerMod13 == 8,  0.502,    \
	blockFlickerMod13 == 9,  0.269,    \
	blockFlickerMod13 == 10, 0.101,    \
	blockFlickerMod13 == 11, 0.799,    \
	blockFlickerMod13 == 12, 0.411,    \
	0.0  \
)
variable.float.blockFlicker13D = if (  \
	blockFlickerMod13 == 0,  0.909,    \
	blockFlickerMod13 == 1,  0.981,    \
	blockFlickerMod13 == 2,  0.170,    \
	blockFlickerMod13 == 3,  0.773,    \
	blockFlickerMod13 == 4,  0.558,    \
	blockFlickerMod13 == 5,  0.615,    \
	blockFlickerMod13 == 6,  0.242,    \
	blockFlickerMod13 == 7,  0.502,    \
	blockFlickerMod13 == 8,  0.269,    \
	blockFlickerMod13 == 9,  0.101,    \
	blockFlickerMod13 == 10, 0.799,    \
	blockFlickerMod13 == 11, 0.411,    \
	blockFlickerMod13 == 12, 0.471,    \
	0.0  \
)

variable.float.blockFlickerValue1 = (blockFlicker9A + blockFlicker11A + blockFlicker13A) / 3
variable.float.blockFlickerValue2 = (blockFlicker9B + blockFlicker11B + blockFlicker13B) / 3
variable.float.blockFlickerValue3 = (blockFlicker9C + blockFlicker11C + blockFlicker13C) / 3
variable.float.blockFlickerValue4 = (blockFlicker9D + blockFlicker11D + blockFlicker13D) / 3

# cubic interpolate 
variable.float.blockFlickerA0 = blockFlickerValue4 - blockFlickerValue3 - blockFlickerValue1 + blockFlickerValue2
variable.float.blockFlickerA1 = blockFlickerValue1 - blockFlickerValue2 - blockFlickerA0
variable.float.blockFlickerA2 = blockFlickerValue3 - blockFlickerValue1
variable.float.blockFlickerA3 = blockFlickerValue2
variable.float.blockFlickerInterpValue3 = blockFlickerInterpValue * blockFlickerInterpValue * blockFlickerInterpValue
variable.float.blockFlickerInterpValue2 = blockFlickerInterpValue * blockFlickerInterpValue
variable.float.rawBlockFlickerAmount = blockFlickerA0 * blockFlickerInterpValue3 + blockFlickerA1 * blockFlickerInterpValue2 + blockFlickerA2 * blockFlickerInterpValue + blockFlickerA3
uniform.float.blockFlickerAmount = pow(rawBlockFlickerAmount, 0.1) * 0.5 + 1.0 - 0.5





# inverses

uniform.float.invAspectRatio = 1.0 / aspectRatio
uniform.float.invFar = 1.0 / far
uniform.vec2.invViewSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)
uniform.vec2.invPixelSize = vec2(viewWidth, viewHeight)
uniform.float.invFrameTime = 1.0 / frameTime
uniform.float.invFarMinusNear = 1.0 / farMinusNear
