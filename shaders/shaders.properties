###############################
#        SETTINGS MENU        #
###############################



screen = <profile> <empty> [SKY_SETTINGS] [COLOR_SETTINGS] [SHADING_SETTINGS] [POST_PROCESSING_SETTINGS] [WAVING_SETTINGS] [DEBUG_SETTINGS]
	
	screen.SKY_SETTINGS = [FOG_SETTINGS] DARKEN_SKY_UNDERGROUND
		
		screen.FOG_SETTINGS = FOG_ENABLED ENTITY_FOG_ENABLED FOG_HEIGHT_SCALE FOG_EXTRA_CLOUDS_DISTANCE FOG_START FOG_WATER_DISTANCE FOG_CURVE FOG_WATER_CURVE
		
	screen.COLOR_SETTINGS = [DAY_COLOR_SETTINGS] [NIGHT_COLOR_SETTINGS] [SUNRISE_COLOR_SETTINGS] [SUNSET_COLOR_SETTINGS] [BLOCK_COLOR_SETTINGS]
		
		screen.DAY_COLOR_SETTINGS = SKYLIGHT_DAY_BRIGHTNESS AMBIENT_DAY_BRIGHTNESS SKYLIGHT_DAY_RED AMBIENT_DAY_RED SKYLIGHT_DAY_BLUE AMBIENT_DAY_BLUE SKYLIGHT_DAY_GREEN AMBIENT_DAY_GREEN
		
		screen.NIGHT_COLOR_SETTINGS = SKYLIGHT_NIGHT_BRIGHTNESS AMBIENT_NIGHT_BRIGHTNESS SKYLIGHT_NIGHT_RED AMBIENT_NIGHT_RED SKYLIGHT_NIGHT_BLUE AMBIENT_NIGHT_BLUE SKYLIGHT_NIGHT_GREEN AMBIENT_NIGHT_GREEN
		
		screen.SUNRISE_COLOR_SETTINGS = SKYLIGHT_SUNRISE_BRIGHTNESS AMBIENT_SUNRISE_BRIGHTNESS SKYLIGHT_SUNRISE_RED AMBIENT_SUNRISE_RED SKYLIGHT_SUNRISE_BLUE AMBIENT_SUNRISE_BLUE SKYLIGHT_SUNRISE_GREEN AMBIENT_SUNRISE_GREEN
		
		screen.SUNSET_COLOR_SETTINGS = SKYLIGHT_SUNSET_BRIGHTNESS AMBIENT_SUNSET_BRIGHTNESS SKYLIGHT_SUNSET_RED AMBIENT_SUNSET_RED SKYLIGHT_SUNSET_BLUE AMBIENT_SUNSET_BLUE SKYLIGHT_SUNSET_GREEN AMBIENT_SUNSET_GREEN
		
		screen.BLOCK_COLOR_SETTINGS = BLOCK_BRIGHTNESS BLOCK_RED BLOCK_GREEN BLOCK_BLUE
		
	screen.SHADING_SETTINGS = SHADOWS_ENABLED shadowMapResolution shadowDistance SHADOW_FILTERING ambientOcclusionLevel USE_VANILLA_BRIGHTNESS EXCLUDE_FOLIAGE SIDE_SHADING sunPathRotation RAIN_LIGHT_MULT [HANDHELD_LIGHT_SETTINGS] [SSAO_SETTINGS]
		
		screen.HANDHELD_LIGHT_SETTINGS = HANDHELD_LIGHT_ENABLED HANDHELD_LIGHT_DISTANCE HANDHELD_LIGHT_BRIGHTNESS
		
	screen.POST_PROCESSING_SETTINGS = [SSAO_SETTINGS] [BLOOM_SETTINGS] [SUNRAYS_SETTINGS] [DOF_SETTINGS] [ANTI_ALIASING_SETTINGS] [MOTION_BLUR_SETTINGS] [SHARPENING_SETTINGS] [COLOR_CORRECTION_SETTINGS] [VIGNETTE_SETTINGS]
		
		screen.SSAO_SETTINGS = SSAO_ENABLED AO_AMOUNT AO_SIZE AO_QUALITY
		
		screen.BLOOM_SETTINGS = BLOOM_ENABLED BLOOM_QUALITY BLOOM_AMOUNT BLOOM_SIZE BLOOM_LEVELS BLOOM_LOW_CUTOFF BLOOM_HIGH_CUTOFF BLOOM_SKY_BRIGHTNESS BLOOM_ENTITY_BRIGHTNESS BLOOM_CLOUD_BRIGHTNESS BLOOM_HAND_BRIGHTNESS
		
		screen.SUNRAYS_SETTINGS = SUNRAYS_ENABLED SUNRAYS_STYLE SUNRAYS_QUALITY SUNRAYS_COMPUTE_COUNT SUNRAYS_AMOUNT_DAY SUNRAYS_AMOUNT_NIGHT SUNRAYS_AMOUNT_SUNRISE SUNRAYS_AMOUNT_SUNSET SUNRAYS_SUN_RED SUNRAYS_SUN_GREEN SUNRAYS_SUN_BLUE SUNRAYS_MOON_RED SUNRAYS_MOON_GREEN SUNRAYS_MOON_BLUE SUNRAYS_FLICKERING_FIX
		
		screen.DOF_SETTINGS = DOF_ENABLED DOF_SLOPE_TYPE DOF_NEAR_BLUR_START DOF_FAR_BLUR_START DOF_NEAR_BLUR_SLOPE DOF_FAR_BLUR_SLOPE DOF_NEAR_BLUR_STRENGTH DOF_FAR_BLUR_STRENGTH DOF_NEAR_BLUR_SIZE DOF_FAR_BLUR_SIZE DOF_LOCKED_FOCAL_PLANE DOF_FOCAL_PLANE_DISTANCE
		
		screen.ANTI_ALIASING_SETTINGS = TAA_ENABLED
		
		screen.MOTION_BLUR_SETTINGS = MOTION_BLUR_ENABLED MOTION_BLUR_AMOUNT MOTION_BLUR_QUALITY
		
		screen.SHARPENING_SETTINGS = SHARPENING_ENABLED SHARPEN_AMOUNT SHARPEN_VEL_ADDITION SHARPENING_DETECT_SIZE
		
		screen.COLOR_CORRECTION_SETTINGS = GAMMA BRIGHTNESS VIBRANCE SATURATION SATURATION_DARK SATURATION_LIGHT CONTRAST <empty> <empty> CONTRAST_DETECT_RED CONTRAST_DETECT_GREEN CONTRAST_DETECT_BLUE TONEMAPPER USE_GAMMA_CORRECTION
		screen.COLOR_CORRECTION_SETTINGS.columns = 3
		
		screen.VIGNETTE_SETTINGS = VIGNETTE_ENABLED VIGNETTE_SCALE VIGNETTE_AMOUNT_SURFACE VIGNETTE_AMOUNT_UNDERGROUND VIGNETTE_NOISE_ENABLED
		
	screen.WAVING_SETTINGS = WAVING_ENABLED WAVING_SPEED WAVING_WORLD_SCALE WAVING_AMOUNT_1 WAVING_AMOUNT_2 WAVING_AMOUNT_3 WAVING_RAIN_MULT WAVING_NIGHT_MULT
	
	screen.DEBUG_SETTINGS = USE_BETTER_RAND SHOW_DANGEROUS_LIGHT USE_SIMPLE_LIGHT SHOW_SUNLIGHT SHOW_BRIGHTNESSES SSAO_SHOW_AMOUNT BLOOM_SHOW_ADDITION BLOOM_SHOW_FILTERED_TEXTURE SUNRAYS_SHOW_ADDITION DOF_SHOW_AMOUNTS



sliders = SHADOW_BIAS shadowMapResolution sunPathRotation shadowDistance SIDE_SHADING BLOCK_BRIGHTNESS BLOCK_RED BLOCK_GREEN BLOCK_BLUE SKYLIGHT_DAY_BRIGHTNESS SKYLIGHT_DAY_RED SKYLIGHT_DAY_BLUE SKYLIGHT_DAY_GREEN AMBIENT_DAY_BRIGHTNESS AMBIENT_DAY_RED AMBIENT_DAY_BLUE AMBIENT_DAY_GREEN SKYLIGHT_NIGHT_BRIGHTNESS SKYLIGHT_NIGHT_RED SKYLIGHT_NIGHT_BLUE SKYLIGHT_NIGHT_GREEN AMBIENT_NIGHT_BRIGHTNESS AMBIENT_NIGHT_RED AMBIENT_NIGHT_BLUE AMBIENT_NIGHT_GREEN SKYLIGHT_SUNRISE_BRIGHTNESS SKYLIGHT_SUNRISE_RED SKYLIGHT_SUNRISE_BLUE SKYLIGHT_SUNRISE_GREEN AMBIENT_SUNRISE_BRIGHTNESS AMBIENT_SUNRISE_RED AMBIENT_SUNRISE_BLUE AMBIENT_SUNRISE_GREEN SKYLIGHT_SUNSET_BRIGHTNESS SKYLIGHT_SUNSET_RED SKYLIGHT_SUNSET_BLUE SKYLIGHT_SUNSET_GREEN AMBIENT_SUNSET_BRIGHTNESS AMBIENT_SUNSET_RED AMBIENT_SUNSET_BLUE AMBIENT_SUNSET_GREEN GAMMA BRIGHTNESS SATURATION SATURATION_DARK SATURATION_LIGHT VIBRANCE CONTRAST CONTRAST_DETECT_RED CONTRAST_DETECT_GREEN CONTRAST_DETECT_BLUE CONTRAST BLOOM_AMOUNT BLOOM_SIZE BLOOM_QUALITY BLOOM_LEVELS BLOOM_LOW_CUTOFF BLOOM_HIGH_CUTOFF BLOOM_SKY_BRIGHTNESS BLOOM_ENTITY_BRIGHTNESS BLOOM_CLOUD_BRIGHTNESS BLOOM_HAND_BRIGHTNESS SHARPEN_AMOUNT SUNRAYS_QUALITY SUNRAYS_COMPUTE_COUNT SUNRAYS_AMOUNT_DAY SUNRAYS_AMOUNT_NIGHT SUNRAYS_AMOUNT_SUNRISE SUNRAYS_AMOUNT_SUNSET VIGNETTE_AMOUNT_SURFACE VIGNETTE_AMOUNT_UNDERGROUND VIGNETTE_SCALE WAVING_SPEED WAVING_WORLD_SCALE WAVING_AMOUNT_1 WAVING_AMOUNT_2 WAVING_AMOUNT_3 WAVING_RAIN_MULT WAVING_NIGHT_MULT RAIN_LIGHT_MULT HANDHELD_LIGHT_DISTANCE HANDHELD_LIGHT_BRIGHTNESS SHADOW_FILTERING AO_AMOUNT AO_SIZE AO_QUALITY SUNRAYS_SUN_RED SUNRAYS_SUN_GREEN SUNRAYS_SUN_BLUE SUNRAYS_MOON_RED SUNRAYS_MOON_GREEN SUNRAYS_MOON_BLUE FOG_HEIGHT_SCALE FOG_EXTRA_CLOUDS_DISTANCE FOG_START FOG_WATER_DISTANCE FOG_CURVE FOG_WATER_CURVE ambientOcclusionLevel DOF_NEAR_BLUR_START DOF_NEAR_BLUR_SLOPE DOF_NEAR_BLUR_STRENGTH DOF_NEAR_BLUR_SIZE DOF_FAR_BLUR_START DOF_FAR_BLUR_SLOPE DOF_FAR_BLUR_STRENGTH DOF_FAR_BLUR_SIZE MOTION_BLUR_AMOUNT MOTION_BLUR_QUALITY DOF_FOCAL_PLANE_DISTANCE



profile.POTATO = !SHADOWS_ENABLED !SHADOW_FILTERING shadowDistance=96.0  shadowMapResolution=256 !SSAO_ENABLED AO_QUALITY=3 !BLOOM_ENABLED BLOOM_QUALITY=3 !SUNRAYS_ENABLED SUNRAYS_QUALITY=4 !TAA_ENABLED !SHARPENING_ENABLED
profile.LOW    =  SHADOWS_ENABLED !SHADOW_FILTERING shadowDistance=96.0  shadowMapResolution=256 !SSAO_ENABLED AO_QUALITY=3  BLOOM_ENABLED BLOOM_QUALITY=3 !SUNRAYS_ENABLED SUNRAYS_QUALITY=4  TAA_ENABLED  SHARPENING_ENABLED
profile.MEDIUM =  SHADOWS_ENABLED  SHADOW_FILTERING shadowDistance=128.0 shadowMapResolution=512  SSAO_ENABLED AO_QUALITY=3  BLOOM_ENABLED BLOOM_QUALITY=3  SUNRAYS_ENABLED SUNRAYS_QUALITY=4  TAA_ENABLED  SHARPENING_ENABLED










#################################
#        SHADER SETTINGS        #
#################################



dynamicHandLight = false










#####################################
#        SHADER FILE ENABLES        #
#####################################



program.world0/shadow.enabled = SHADOWS_ENABLED
program.world-1/shadow.enabled = SHADOWS_ENABLED
program.world1/shadow.enabled = SHADOWS_ENABLED

program.world0/composite.enabled = BLOOM_ENABLED || SSAO_ENABLED
program.world-1/composite.enabled = BLOOM_ENABLED || SSAO_ENABLED
program.world1/composite.enabled = BLOOM_ENABLED || SSAO_ENABLED

program.world0/composite1.enabled = BLOOM_ENABLED || SUNRAYS_ENABLED
program.world-1/composite1.enabled = BLOOM_ENABLED || SUNRAYS_ENABLED
program.world1/composite1.enabled = BLOOM_ENABLED || SUNRAYS_ENABLED

program.world0/composite2.enabled = BLOOM_ENABLED || SUNRAYS_ENABLED
program.world-1/composite2.enabled = BLOOM_ENABLED || SUNRAYS_ENABLED
program.world1/composite2.enabled = BLOOM_ENABLED || SUNRAYS_ENABLED

program.world0/composite3.enabled = DOF_ENABLED
program.world-1/composite3.enabled = DOF_ENABLED
program.world1/composite3.enabled = DOF_ENABLED

program.world0/composite4.enabled = TAA_ENABLED || MOTION_BLUR_ENABLED
program.world-1/composite4.enabled = TAA_ENABLED || MOTION_BLUR_ENABLED
program.world1/composite4.enabled = TAA_ENABLED || MOTION_BLUR_ENABLED










########################################
#        PER-FRAME CALCULATIONS        #
########################################



# constants

uniform.float.sunriseStart = 23215 - 24000
uniform.float.sunriseSwitch = 23710 - 24000
uniform.float.sunriseEnd = 1000
uniform.float.sunsetStart = 11000
uniform.float.sunsetSwitch = 12290
uniform.float.sunsetEnd = 12790
uniform.float.pi = 3.1415926538



# main

uniform.float.farPlusNear = far + near
uniform.float.farMinusNear = far - near
uniform.float.twoTimesNear = 2.0 * near
uniform.float.twoTimesNearTimesFar = 2.0 * near * far

uniform.vec2.viewSize = vec2(viewWidth, viewHeight)
uniform.vec2.pixelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

variable.float.difX = cameraPosition.x - previousCameraPosition.x
variable.float.difY = cameraPosition.y - previousCameraPosition.y
variable.float.difZ = cameraPosition.z - previousCameraPosition.z
uniform.float.velocity = sqrt(difX * difX + difY * difY + difZ * difZ) / frameTime
uniform.float.sharpenVelocityFactor = smooth(1, min(velocity, 0.01) * 20, 0, 0.5)

uniform.float.betterRainStrength = 1.0 - sqrt(1.0 - rainStrength)

# raise / lower darkened horizon
uniform.float.horizonAltitudeAddend1 = atan(75.0 / (eyeAltitude - 58.0))
# fix output of atan
uniform.float.horizonAltitudeAddend2 = horizonAltitudeAddend1 + if(horizonAltitudeAddend1 > 0.0, pi / -2.0, pi / 2.0)
# shrink horizon faster when you're high off the ground
uniform.float.horizonAltitudeAddend = horizonAltitudeAddend2 - (atan(eyeAltitude - 64.0) + pi / 2.0) / 20.0

uniform.float.sunriseTime = if(worldTime > 18000, worldTime - 24000, worldTime)

# true if the sun is casting shadows
uniform.bool.isDay = sunriseTime >= sunriseStart && sunriseTime <= sunsetEnd
# true if looking towards whichever isn't casting shadows
uniform.bool.isOtherLightSource = shadowLightPosition.z > 0.0001
# isDay ^^ isOtherLightSource
uniform.bool.isSun = (isDay && !isOtherLightSource) || (!isDay && isOtherLightSource)

uniform.float.centerLinearDepthSmooth = 2.0 * near / (far + near - centerDepthSmooth * (far - near))



# TAA Jitter, taken from Complementary Reiamgined
# Link: https://modrinth.com/shader/complementary-reimagined

uniform.int.frameMod8 = frameCounter % 8

uniform.float.taaOffsetX = if (  \
	frameMod8 == 0,  0.125,      \
	frameMod8 == 1, -0.125,      \
	frameMod8 == 2,  0.625,      \
	frameMod8 == 3,  0.375,      \
	frameMod8 == 4, -0.625,      \
	frameMod8 == 5, -0.875,      \
	frameMod8 == 6,  0.375,      \
	frameMod8 == 7,  0.875,      \
	0.0                          \
)
uniform.float.taaOffsetY = if (  \
	frameMod8 == 0, -0.375,      \
	frameMod8 == 1,  0.375,      \
	frameMod8 == 2,  0.125,      \
	frameMod8 == 3, -0.625,      \
	frameMod8 == 4,  0.625,      \
	frameMod8 == 5, -0.125,      \
	frameMod8 == 6, -0.875,      \
	frameMod8 == 7,  0.875,      \
	0.0                          \
)
uniform.vec2.taaOffset = vec2(taaOffsetX / viewWidth * 0.98, taaOffsetY / viewHeight * 0.98)



# skylight percents:

uniform.float.sunPercent = (sunriseTime - sunriseSwitch) / (sunriseEnd - sunriseSwitch)
uniform.float.moonPercent = (worldTime - sunsetSwitch) / (sunsetEnd - sunsetSwitch)
uniform.float.sunrisePercent = sqrt((sunriseTime - sunriseStart) / (sunriseSwitch - sunriseStart))
uniform.float.sunsetPercent = sqrt((worldTime - sunsetStart) / (sunsetSwitch - sunsetStart))

# channels: (sun, moon, sunrise, sunset)
uniform.float.rawSunPercent = if (                                                     \
	sunriseTime >= sunriseStart  && sunriseTime < sunriseSwitch, 0.0,                  \
	sunriseTime >= sunriseSwitch && sunriseTime < sunriseEnd   , sunPercent,           \
	sunriseTime >= sunriseEnd    && worldTime   < sunsetStart  , 1.0,                  \
	worldTime   >= sunsetStart   && worldTime   < sunsetSwitch , 1.0 - sunsetPercent,  \
	worldTime   >= sunsetSwitch  && worldTime   < sunsetEnd    , 0.0,                  \
	0.0                                                                                \
)
uniform.float.rawMoonPercent = if (                                                     \
	sunriseTime >= sunriseStart  && sunriseTime < sunriseSwitch, 1.0 - sunrisePercent,  \
	sunriseTime >= sunriseSwitch && sunriseTime < sunriseEnd   , 0.0,                   \
	sunriseTime >= sunriseEnd    && worldTime   < sunsetStart  , 0.0,                   \
	worldTime   >= sunsetStart   && worldTime   < sunsetSwitch , 0.0,                   \
	worldTime   >= sunsetSwitch  && worldTime   < sunsetEnd    , moonPercent,           \
	1.0                                                                                 \
)
uniform.float.rawSunrisePercent = if (                                             \
	sunriseTime >= sunriseStart  && sunriseTime < sunriseSwitch, sunrisePercent,   \
	sunriseTime >= sunriseSwitch && sunriseTime < sunriseEnd   , 1.0 - sunPercent, \
	sunriseTime >= sunriseEnd    && worldTime   < sunsetStart  , 0.0,              \
	worldTime   >= sunsetStart   && worldTime   < sunsetSwitch , 0.0,              \
	worldTime   >= sunsetSwitch  && worldTime   < sunsetEnd    , 0.0,              \
	0.0                                                                            \
)
uniform.float.rawSunsetPercent = if (                                                \
	sunriseTime >= sunriseStart  && sunriseTime < sunriseSwitch, 0.0,                \
	sunriseTime >= sunriseSwitch && sunriseTime < sunriseEnd   , 0.0,                \
	sunriseTime >= sunriseEnd    && worldTime   < sunsetStart  , 0.0,                \
	worldTime   >= sunsetStart   && worldTime   < sunsetSwitch , sunsetPercent,      \
	worldTime   >= sunsetSwitch  && worldTime   < sunsetEnd    , 1.0 - moonPercent,  \
	0.0                                                                              \
)

uniform.vec4.rawSkylightPercents = vec4(rawSunPercent, rawMoonPercent, rawSunrisePercent, rawSunsetPercent)

uniform.float.rawSunTotal = rawSunPercent + rawSunrisePercent + rawSunsetPercent



# inverses

uniform.float.invAspectRatio = 1.0 / aspectRatio
uniform.float.invFar = 1.0 / far
uniform.vec2.invViewSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)
uniform.vec2.invPixelSize = vec2(viewWidth, viewHeight)
uniform.float.invFrameTime = 1.0 / frameTime
uniform.float.invFarMinusNear = 1.0 / farMinusNear
